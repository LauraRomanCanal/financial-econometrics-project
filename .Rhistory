for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
cat("Log likelihood at MLEs: ","\n")
print(-llh(fit$par))
# Step 6: Create and Print Summary Report:
se.coef = sqrt(abs(diag(solve(Hessian))))
tval = fit$par/se.coef
matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
dimnames(matcoef) = list(names(tval), c(" Estimate",
" Std. Error", " t value", "Pr(>|t|)"))
cat("\nCoefficient(s):\n")
printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
# compute output
est=fit$par
mu = est[1]; omega = est[2]; alpha = est[3]; gam1=est[4]; beta = est[5]; delta = est[6]
z=(Tx-mu); Mean = mean(abs(z)**delta)
sigma.t = aparch.filter(x,est)$sigma2
return(list(residuals = z, volatility = sigma.t, par=est))
}
aparch.C <- APARCH.fit(x)
aparch.R <-
aparch.C$par
aparch.C
params = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
llh(params)
params <- aparch.R$par
)
data <- read.csv('/home/euan/documents/financial-econ/data/tickers/DBB.csv')
data    <- data[seq(nrow(data),1,-1),]
price   <- data$Adj.Close
x <- ( log(price[2:length(price)]) - log(price[1:(length(price)-1)]) ) * 100
source('aparch.R')
dyn.load("/home/euan/documents/financial-econ/financial-econometrics-project/APARCH.so")
# Gaussian TARCH(1,1) functions
aparch.filter <- function( y , param ){
T      <- length(y)
if( any(!is.finite(param)) ){
filter = list( loglik=-Inf , sigma2=rep(NA,T) )
return( filter )
}
result <- .C( 'aparch_filter',
status = as.integer(0),
sigma2 = as.double(rep(0,T)) ,
eps    = as.double(rep(0,T)) ,
loglik = as.double(0) ,
as.double(param) ,
as.double(y) ,
as.integer(T)
)
filter = list( loglik=result$loglik , sigma2=result$sigma2 )
return(filter)
}
llh <- function(param){
filter <- aparch.filter(Tx,param)
return(-filter$loglik)
}
llh(params)
APARCH.fit <- function(x){
Tx <<- x
Meanx = mean(Tx); Varx = var(Tx); S = 1e-6
params = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
lowerBounds = c(mu = -10*abs(Meanx), omega = S^2, alpha = S, gam1=S, beta = S,delta=0.1)
upperBounds = c(mu = 10*abs(Meanx), omega = 10*Varx, alpha = 1-S, gam1 = 1-S, beta = 1-S,delta=5)
# Step 2: Estimate Parameters and Compute Numerically Hessian:
fit = nlminb(start = params, objective = llh,
lower = lowerBounds, upper = upperBounds, control = list(trace=3))
epsilon = 0.00001  * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
cat("Log likelihood at MLEs: ","\n")
print(-llh(fit$par))
# Step 6: Create and Print Summary Report:
se.coef = sqrt(abs(diag(solve(Hessian))))
tval = fit$par/se.coef
matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
dimnames(matcoef) = list(names(tval), c(" Estimate",
" Std. Error", " t value", "Pr(>|t|)"))
cat("\nCoefficient(s):\n")
printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
# compute output
est=fit$par
mu = est[1]; omega = est[2]; alpha = est[3]; gam1=est[4]; beta = est[5]; delta = est[6]
z=(Tx-mu); Mean = mean(abs(z)**delta)
sigma.t = aparch.filter(x,est)$sigma2
return(list(residuals = z, volatility = sigma.t, par=est))
}
aparch.C <- APARCH.fit(x)
aparch.R <-
aparch.C$par
aparch.C
params = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
llh(params)
params <- aparch.R$par
llh(params)
aparch.C
aparch.R <- aparch11(x)
aparch.C <- APARCH.fit(x)
aparch.R <- aparch11(x)
aparch.C$par
llh(aparch.C$par)
aparch.C$par['gam1'] <- 0.3
llh(aparch.C$par)
aparch.R <- aparch11(x)
aparch.R$par['gam1'] <- 0.001
llh(aparch.R$par)
aparch.R$par['gam1'] <- 0.000001
llh(aparch.R$par)
aparch.C <- APARCH.fit(x)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
Hessian = matrix(0, ncol = npar, nrow = npar)
fit <- APARCH.fit(x)
epsilon = 0.00001  * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
epsilon
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
Hessian
i = 1; j = 3
i = 3; j = i
i = 3; j = 1
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x1
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x2
x3
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x3
x4
epsilon[i]
epsilon[j]
(4*epsilon[i]*epsilon[j])
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
(llh(x1)-llh(x2)-llh(x3)+llh(x4))
llh(x1)
llh(x2)
llh(x3)
llh(x4)
x1
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
x1
x1 = x2 = x3 = x4  = fit$par
x1
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
llh(x1)
x1['alpha'] + x1['beta']
x1['alpha'] + x1['beta'] > 1
data <- read.csv('/home/euan/documents/financial-econ/data/tickers/DBB.csv')
data    <- data[seq(nrow(data),1,-1),]
price   <- data$Adj.Close
x <- ( log(price[2:length(price)]) - log(price[1:(length(price)-1)]) ) * 100
source('aparch.R')
data <- read.csv('/home/euan/documents/financial-econ/data/tickers/DBB.csv')
data    <- data[seq(nrow(data),1,-1),]
price   <- data$Adj.Close
x <- ( log(price[2:length(price)]) - log(price[1:(length(price)-1)]) ) * 100
source('aparch.R')
dyn.load("/home/euan/documents/financial-econ/financial-econometrics-project/APARCH.so")
# Gaussian TARCH(1,1) functions
aparch.filter <- function( y , param ){
T      <- length(y)
if( any(!is.finite(param)) ){
filter = list( loglik=-Inf , sigma2=rep(NA,T) )
return( filter )
}
result <- .C( 'aparch_filter',
status = as.integer(0),
sigma2 = as.double(rep(0,T)) ,
eps    = as.double(rep(0,T)) ,
loglik = as.double(0) ,
as.double(param) ,
as.double(y) ,
as.integer(T)
)
filter = list( loglik=result$loglik , sigma2=result$sigma2 )
return(filter)
}
llh <- function(param){
filter <- aparch.filter(Tx,param)
return(-filter$loglik)
}
llh(params)
APARCH.fit <- function(x){
Tx <<- x
Meanx = mean(Tx); Varx = var(Tx); S = 1e-6
params = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
lowerBounds = c(mu = -10*abs(Meanx), omega = S^2, alpha = S, gam1=S, beta = S,delta=0.1)
upperBounds = c(mu = 10*abs(Meanx), omega = 10*Varx, alpha = 1-S, gam1 = 1-S, beta = 1-S,delta=5)
# Step 2: Estimate Parameters and Compute Numerically Hessian:
fit = nlminb(start = params, objective = llh,
lower = lowerBounds, upper = upperBounds, control = list(trace=3))
epsilon = 0.00001  * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (llh(x1)-llh(x2)-llh(x3)+llh(x4))/
(4*epsilon[i]*epsilon[j])
}
}
cat("Log likelihood at MLEs: ","\n")
print(-llh(fit$par))
# Step 6: Create and Print Summary Report:
se.coef = sqrt(abs(diag(solve(Hessian))))
tval = fit$par/se.coef
matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
dimnames(matcoef) = list(names(tval), c(" Estimate",
" Std. Error", " t value", "Pr(>|t|)"))
cat("\nCoefficient(s):\n")
printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
# compute output
est=fit$par
mu = est[1]; omega = est[2]; alpha = est[3]; gam1=est[4]; beta = est[5]; delta = est[6]
z=(Tx-mu); Mean = mean(abs(z)**delta)
sigma.t = aparch.filter(x,est)$sigma2
return(list(residuals = z, volatility = sigma.t, par=est))
}
aparch.C <- APARCH.fit(x)
aparch.R <- aparch11(x)
fit <- APARCH.fit(x)
epsilon = 0.00001  * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
fit <- APARCH.fit(x)
)
fit <- APARCH.fit(x)
aparch.C <- APARCH.fit(x)
aparch.R <- aparch11(x)
aparch.C$par - aparch.R$par
setwd('/home/euan/documents/financial-econ/financial-econometrics-project/')
data <- read.csv('/home/euan/documents/financial-econ/data/tickers/DBB.csv')
data    <- data[seq(nrow(data),1,-1),]
price   <- data$Adj.Close
x <- ( log(price[2:length(price)]) - log(price[1:(length(price)-1)]) ) * 100
source('tarch.R')
source('aparchC.R')
# First define the conditional likelihood of observing z given sigma
aparch11 = function(x) {
# Estimation of APARCH(1,1) model with Gaussian innovations
# Step 1: Initialize Time Series Globally:
Tx <<- x
T <<- length(Tx)
# Step 1: Initialize Model Parameters and Bounds:
Meanx = mean(Tx); Varx = var(Tx); S = 1e-6
params      = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
lowerBounds = c(mu = -10*abs(Meanx), omega = S^2, alpha = S, gam1=S, beta = S,delta=0.1)
upperBounds = c(mu = 10*abs(Meanx), omega = 10*Varx, alpha = 1-S, gam1 = 1-S, beta = 1-S,delta=5)
aparchLLH = function(params) {
# Given parameters, calculate the log-likelihood of Tx
mu = params[1]; omega = params[2]; alpha = params[3]; gam1=params[4]; beta = params[5]; delta=params[6]
z = (Tx-mu); Mean = mean(z[1:10]^2)  # NOT SURE WHY WE INITIALISE EPS WITH THIS MEAN
# Use Filter Representation:
eps = c(Mean, z[-T])
e = omega + alpha*( abs( eps ) - gam1*eps )**delta
sigma = beta*Mean
sigma = rep(sigma,T)
for(i in 2:T){
sigma[i] = beta*sigma[i-1] + e[i]
}
hh = abs(sigma)**(1/delta)
llh = -sum(log(dnorm(x=z, sd = hh)))
return(llh)
}
# Step 2: Estimate Parameters and Compute Numerically Hessian:
fit = nlminb(start = params, objective = aparchLLH,
lower = lowerBounds, upper = upperBounds,  control = list(trace=3))
epsilon = 0.0001 * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (aparchLLH(x1)-aparchLLH(x2)-aparchLLH(x3)+aparchLLH(x4))/
(4*epsilon[i]*epsilon[j])
}
}
cat("Log likelihood at MLEs: ","\n")
print(-aparchLLH(fit$par))
# Step 6: Create and Print Summary Report:
se.coef = sqrt(diag(solve(Hessian)))
tval = fit$par/se.coef
matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
dimnames(matcoef) = list(names(tval), c(" Estimate",
" Std. Error", " t value", "Pr(>|t|)"))
cat("\nCoefficient(s):\n")
printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
# compute output
est=fit$par
mu = est[1]; omega = est[2]; alpha = est[3]; gam1=est[4]; beta = est[5]; delta = est[6]
z=(Tx-mu); Mean = mean(abs(z)**delta)
e = omega + alpha * ( abs( c(Mean, z[-length(z)]) ) - gam1*c(Mean,z[-length(z)]) )**delta
h = filter(e, beta, "r", init = Mean)
sigma.t = abs(h)**(1/delta)
return(list(residuals = z, volatility = sigma.t, par=est))
}
aparch11(x)
aparch11 = function(x) {
# Estimation of APARCH(1,1) model with Gaussian innovations
# Step 1: Initialize Time Series Globally:
Tx <<- x
T <- length(Tx)
# Step 1: Initialize Model Parameters and Bounds:
Meanx = mean(Tx); Varx = var(Tx); S = 1e-6
params      = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
lowerBounds = c(mu = -10*abs(Meanx), omega = S^2, alpha = S, gam1=S, beta = S,delta=0.1)
upperBounds = c(mu = 10*abs(Meanx), omega = 10*Varx, alpha = 1-S, gam1 = 1-S, beta = 1-S,delta=5)
aparchLLH = function(params) {
# Given parameters, calculate the log-likelihood of Tx
mu = params[1]; omega = params[2]; alpha = params[3]; gam1=params[4]; beta = params[5]; delta=params[6]
z = (Tx-mu); Mean = mean(z[1:10]^2)  # NOT SURE WHY WE INITIALISE EPS WITH THIS MEAN
# Use Filter Representation:
eps = c(Mean, z[-T])
e = omega + alpha*( abs( eps ) - gam1*eps )**delta
sigma = beta*Mean
sigma = rep(sigma,T)
for(i in 2:T){
sigma[i] = beta*sigma[i-1] + e[i]
}
hh = abs(sigma)**(1/delta)
llh = -sum(log(dnorm(x=z, sd = hh)))
return(llh)
}
# Step 2: Estimate Parameters and Compute Numerically Hessian:
fit = nlminb(start = params, objective = aparchLLH,
lower = lowerBounds, upper = upperBounds,  control = list(trace=3))
epsilon = 0.0001 * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (aparchLLH(x1)-aparchLLH(x2)-aparchLLH(x3)+aparchLLH(x4))/
(4*epsilon[i]*epsilon[j])
}
}
cat("Log likelihood at MLEs: ","\n")
print(-aparchLLH(fit$par))
# Step 6: Create and Print Summary Report:
se.coef = sqrt(diag(solve(Hessian)))
tval = fit$par/se.coef
matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
dimnames(matcoef) = list(names(tval), c(" Estimate",
" Std. Error", " t value", "Pr(>|t|)"))
cat("\nCoefficient(s):\n")
printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
# compute output
est=fit$par
mu = est[1]; omega = est[2]; alpha = est[3]; gam1=est[4]; beta = est[5]; delta = est[6]
z=(Tx-mu); Mean = mean(abs(z)**delta)
e = omega + alpha * ( abs( c(Mean, z[-length(z)]) ) - gam1*c(Mean,z[-length(z)]) )**delta
h = filter(e, beta, "r", init = Mean)
sigma.t = abs(h)**(1/delta)
return(list(residuals = z, volatility = sigma.t, par=est))
}
aparch11(x)
setwd('/home/euan/documents/financial-econ/financial-econometrics-project/')
data <- read.csv('/home/euan/documents/financial-econ/data/tickers/DBB.csv')
data    <- data[seq(nrow(data),1,-1),]
price   <- data$Adj.Close
x <- ( log(price[2:length(price)]) - log(price[1:(length(price)-1)]) ) * 100
source('tarch.R')
source('aparchC.R')
# First define the conditional likelihood of observing z given sigma
aparch11 = function(x) {
# Estimation of APARCH(1,1) model with Gaussian innovations
# Step 1: Initialize Time Series Globally:
Tx <<- x
T <- length(Tx)
# Step 1: Initialize Model Parameters and Bounds:
Meanx = mean(Tx); Varx = var(Tx); S = 1e-6
params      = c(mu = Meanx, omega = 0.1*Varx, alpha = 0.1, gam1= 0.02, beta = 0.81,delta=2)
lowerBounds = c(mu = -10*abs(Meanx), omega = S^2, alpha = S, gam1=S, beta = S,delta=0.1)
upperBounds = c(mu = 10*abs(Meanx), omega = 10*Varx, alpha = 1-S, gam1 = 1-S, beta = 1-S,delta=5)
aparchLLH = function(params) {
# Given parameters, calculate the log-likelihood of Tx
mu = params[1]; omega = params[2]; alpha = params[3]; gam1=params[4]; beta = params[5]; delta=params[6]
z = (Tx-mu); Mean = mean(z[1:10]^2)  # NOT SURE WHY WE INITIALISE EPS WITH THIS MEAN
eps = c(Mean, z[-T])
e = omega + alpha*( abs( eps ) - gam1*eps )**delta
sigma = beta*Mean
sigma = rep(sigma,T)
for(i in 2:T){
sigma[i] = beta*sigma[i-1] + e[i]
}
hh = abs(sigma)**(1/delta)
llh = -sum(log(dnorm(x=z, sd = hh)))
return(llh)
}
# Step 2: Estimate Parameters and Compute Numerically Hessian:
fit = nlminb(start = params, objective = aparchLLH,
lower = lowerBounds, upper = upperBounds,  control = list(trace=3))
epsilon = 0.0001 * fit$par
npar=length(params)
Hessian = matrix(0, ncol = npar, nrow = npar)
for (i in 1:npar) {
for (j in 1:npar) {
x1 = x2 = x3 = x4  = fit$par
x1[i] = x1[i] + epsilon[i]; x1[j] = x1[j] + epsilon[j]
x2[i] = x2[i] + epsilon[i]; x2[j] = x2[j] - epsilon[j]
x3[i] = x3[i] - epsilon[i]; x3[j] = x3[j] + epsilon[j]
x4[i] = x4[i] - epsilon[i]; x4[j] = x4[j] - epsilon[j]
Hessian[i, j] = (aparchLLH(x1)-aparchLLH(x2)-aparchLLH(x3)+aparchLLH(x4))/
(4*epsilon[i]*epsilon[j])
}
}
cat("Log likelihood at MLEs: ","\n")
print(-aparchLLH(fit$par))
# Step 6: Create and Print Summary Report:
se.coef = sqrt(diag(solve(Hessian)))
tval = fit$par/se.coef
matcoef = cbind(fit$par, se.coef, tval, 2*(1-pnorm(abs(tval))))
dimnames(matcoef) = list(names(tval), c(" Estimate",
" Std. Error", " t value", "Pr(>|t|)"))
cat("\nCoefficient(s):\n")
printCoefmat(matcoef, digits = 6, signif.stars = TRUE)
# compute output
est=fit$par
mu = est[1]; omega = est[2]; alpha = est[3]; gam1=est[4]; beta = est[5]; delta = est[6]
z=(Tx-mu); Mean = mean(abs(z)**delta)
e = omega + alpha * ( abs( c(Mean, z[-length(z)]) ) - gam1*c(Mean,z[-length(z)]) )**delta
h = filter(e, beta, "r", init = Mean)
sigma.t = abs(h)**(1/delta)
return(list(residuals = z, volatility = sigma.t, par=est))
}
rm(list=ls())
